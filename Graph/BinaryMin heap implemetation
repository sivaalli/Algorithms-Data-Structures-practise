package graphs;

import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;



public class BinaryMinHeap {
	class VertexWithWigh<D>{
		D key;
		int weight;
		VertexWithWigh(D key,int weight){
			this.key=key;
			this.weight=weight;
		}
	}
	private Map<Character,VertexWithWigh<Character>> charVertexMap=new HashMap<>();
	private PriorityQueue<VertexWithWigh<Character>> MinHeap=new PriorityQueue<>(new Comparator<VertexWithWigh<Character>>(){
		@Override
		public int compare(VertexWithWigh<Character> o1, VertexWithWigh<Character> o2) {
			// TODO Auto-generated method stub
			if(o1.weight>o2.weight){
				return 1;
			}else if(o1.weight<o2.weight){
				return -1;
			}else{
				return 0;
			}
		}

	});
	
	public boolean contains(Character c){
		if(charVertexMap.containsKey(c)){
			return true;
		}
		return false;
	}
	public void print(){
		Set<VertexWithWigh<Character>> set=new HashSet<>(MinHeap);
		for(VertexWithWigh<Character> c:set){
			System.out.println(c.key+" "+c.weight);
		}
	}
	public VertexWithWigh<Character> get(char c){
		if(charVertexMap.containsKey(c)){
			return charVertexMap.get(c);
		}else{
			return null;
		}
	}
	public void addToMinHeap(char key,int weight){
		VertexWithWigh<Character> vertex=new VertexWithWigh<>(key,weight);
		MinHeap.add(vertex);
		charVertexMap.put(key, vertex);
	}
	public boolean isEmpty(){
		if(charVertexMap.isEmpty()){
			return true;
		}
		return false;
	}
	public VertexWithWigh<Character> poll(){
		char c=MinHeap.peek().key;
		charVertexMap.remove(c);
		return MinHeap.poll();
	}
	public void decreaseKeyMinHeap(Character key,int weight){
		try{
			if(charVertexMap.containsKey(key)){
				MinHeap.remove(charVertexMap.get(key));
				addToMinHeap(key, weight);
			}else{
				throw new Exception();
			}
		}catch(Exception e){
			System.out.println("No such key present");
		}
	}
}
